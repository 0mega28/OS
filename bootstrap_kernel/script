#!/bin/bash

gcc -ffreestanding -c kernel.c -o kernel.o

# -f elf tells the assemble to output object file,
# therefore preserving meta information about labels it must refer
nasm kernel_entry.asm -f elf64 -o kernel_entry.o

# We tell the linker to offset address to 0x1000,
# because that is where our BIOS loads and begins to exectute it.
# ld -o kernel.bin -Ttext 0x1000 kernel.o --oformat binary

# Rather than previously linking kernel.o file to itself 
# we can link it with kernel_entry.o as follows:
# Linker respects order of file it is given
# therefore we are assured kernel_entry.o will precede the code in kernel.o
ld -o kernel.bin -Ttext 0x1000 kernel_entry.o kernel.o --oformat binary

nasm -f bin boot_sect.asm -o boot_sect.bin

cat boot_sect.bin kernel.bin > os.img

qemu-system-x86_64 os.img

rm boot_sect.bin kernel.bin kernel.o kernel_entry.o